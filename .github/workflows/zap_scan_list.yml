name: OWASP ZAP Scan from the list

on: [push]

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: qa 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Pull OWASP ZAP Docker Image
        run: docker pull zaproxy/zap-stable

      - name: Set permissions for working directory
        run: |
             chmod -R 777 $(pwd)
             mkdir -p $(pwd)/reports

      - name: Clean up existing reports
        run: rm -f zap-report*.html

      - name: Run ZAP Scans for URLs in File
        run: |
         if [[ "$ENVIRONMENT" == "qa" ]]; then
            URL_FILE="security/zap_url_qa.txt"
          elif [[ "$ENVIRONMENT" == "sandbox" ]]; then
            URL_FILE="security/zap_url_sandbox.txt"
          else
            echo "Invalid environment specified: $ENVIRONMENT"
            exit 1
          fi
          
         while IFS= read -r url; do
          if [[ "$url" == *".json" ]]; then
            format="openapi"
          elif [[ "$url" == *"graphql"* ]]; then
            format="graphql"
          else
          format="soap"  
          fi
    
          echo "Scanning $url with inferred format $format"
          docker run -v $(pwd):/zap/wrk/:rw zaproxy/zap-stable zap-api-scan.py \
          -t $url \
          -f $format \
          -r "zap-report-$(echo $url | sed 's/[:/.]/-/g').html" \
          -x "zap-report-$(echo $url | sed 's/[:/.]/-/g').json" || true
          done < "$URL_FILE"

      - name: Check for Critical Alerts
        run: |
          # Loop through each generated JSON report
          for JSON_REPORT in zap-report-*.json; do
            if [ -f "$JSON_REPORT" ]; then
              CRITICAL_ALERTS=$(jq '.alerts[] | select(.risk == "High")' "$JSON_REPORT" | wc -l)
              if [ "$CRITICAL_ALERTS" -gt 0 ]; then
                echo "Critical alerts found in $JSON_REPORT! Failing the job."
                exit 1
              else
                echo "No critical alerts found in $JSON_REPORT."
              fi
            else
              echo "JSON report $JSON_REPORT not found!"
            fi
          done
          
      - name: Move ZAP reports to reports directory
        run: mv zap-report*.html reports/

      - name: List files in reports directory
        run: ls -la reports

      - name: Upload All ZAP Reports
        uses: actions/upload-artifact@v4
        with:
           name: ZAP Reports
           path: reports/
           if-no-files-found: warn
           compression-level: 6
           overwrite: false
           include-hidden-files: false
