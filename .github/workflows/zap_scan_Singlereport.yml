name: Run Tests

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download TestNG
        run: |
          mkdir -p lib
          wget https://repo1.maven.org/maven2/org/testng/testng/7.7.0/testng-7.7.0.jar -P lib
          wget https://repo1.maven.org/maven2/com/beust/jcommander/1.81/jcommander-1.81.jar -P lib
          wget https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar -P lib
          # Using SLF4J Simple instead of Log4J12
          wget https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/1.7.36/slf4j-simple-1.7.36.jar -P lib

      - name: Compile and run
        run: |
          javac -cp "lib/testng-7.7.0.jar:lib/jcommander-1.81.jar:lib/slf4j-api-1.7.36.jar:lib/slf4j-simple-1.7.36.jar:SecurityTest/src/main/java:bin" -d bin SecurityTest/src/main/java/utils/*.java SecurityTest/src/test/java/runner/*.java
          java -cp "lib/testng-7.7.0.jar:lib/jcommander-1.81.jar:lib/slf4j-api-1.7.36.jar:lib/slf4j-simple-1.7.36.jar:bin" org.testng.TestNG SecurityTest/testng.xml
          cat SecurityTest/src/assets/Zap_urls.txt

      - name: Pull OWASP ZAP Docker Image

        run: docker pull zaproxy/zap-stable

      - name: Set permissions for working directory

        run: |
          chmod -R 777 $(pwd)
          mkdir -p $(pwd)/reports

      - name: Clean up existing reports

        run: rm -f zap-report*.html

      - name: Run ZAP Scans for URLs in File
        run: |
          report_file="zap-report.html"  
          > "$report_file" 
        
          total_high=0
          total_medium=0
          total_low=0
          
          while IFS= read -r url; do
            if [[ "$url" == *".json" ]]; then
              format="openapi"
            elif [[ "$url" == *"graphql"* ]]; then
              format="graphql"
            else
              format="soap"
            fi
            
            echo "Scanning $url with inferred format $format"
            
            # Create a temporary report file for each scan
            temp_report="zap-report-$(echo $url | sed 's/[:/.]/-/g').html"
            
            # Run the ZAP scan
            docker run -v $(pwd):/zap/wrk/:rw zaproxy/zap-stable zap-api-scan.py \
              -t "$url" \
              -f "$format" \
              -r "$temp_report" || true
            
            high_count=$(grep -o 'High' "$temp_report" | wc -l)
            medium_count=$(grep -o 'Medium' "$temp_report" | wc -l)
            low_count=$(grep -o 'Low' "$temp_report" | wc -l)
        
            total_high=$((total_high + high_count))
            total_medium=$((total_medium + medium_count))
            total_low=$((total_low + low_count))
            
            echo "<hr>" >> "$report_file" # Optional: Add a separator between reports
            echo "<h2>Report for $url</h2>" >> "$report_file" # Title for each URL
            cat "$temp_report" >> "$report_file"
            
            # Optionally, delete the temporary report after appending
            rm "$temp_report"
          done < SecurityTest/src/assets/Zap_urls.txt
          
          # Generate the final summary section
          echo "<h1>Overall Risk Summary</h1>" >> "$report_file"
          echo "<p>High Risks: $total_high</p>" >> "$report_file"
          echo "<p>Medium Risks: $total_medium</p>" >> "$report_file"
          echo "<p>Low Risks: $total_low</p>" >> "$report_file"


      - name: List files in reports directory
        run: ls -la reports

      - name: Upload All ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: ZAP Reports
          path: reports/
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
